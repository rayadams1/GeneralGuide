Redhat Enterprise linux officially supports 22 languages
The linux command line is provided by a program called shell. Shell is a command interpreter.
Over many UNIX like systems, many shells have been developed. The default shell for Enterprise Linux is the GNU bourne-again shell. Bash is an improved version of one of the most successful shells used on UNIX like systems, the Bourne Shell(sh)

Shell prompt shows that the shell is waiting for a command denoted by $
$ is replaced by # if the user is the root user
bash is the default shell in Mac OS X

Users can access the bash shell through a terminal. It can be done through a physical console or virtual console.
Physical console is the hardware display and keyboard used to interact with the system.
The terminal is an interface that provides a display for output and a keyboard for input to a shell session. Terminal access can be configured through serial ports
The physical console supports multiple virtual consoles which act like separate terminals. Each virtual console supports an independant login session.

Commands entered at the shell prompt have 3 basic parts:
 -> Command to run
 -> Options to adjust the behaviour of the command
 -> Arguements which are typically targets of the command
Options normally start with - or --

=> usermod -L morgan -> lock the password on user morgan's account

=> most commands have --help option
    -> this contains usage statements
	 	-> [] surround optional items
	 	-> anything followed by ... represents an arbitrary-length list of items of that type
	 	-> multiple items separated by | means only one of them can be specified
	 	-> text in <> represents variable data

eg: date [OPTION]... [+FORMAT] -> this indicates that a date can take an optional list of options followed by an optional format string prefixed with a + character

=> exit command terminates the current shell session (or ctrl+d)

The default desktop environment in RedHat enterprise linux is provided by GNOME 3. It provides an integrated desktop for users and a unified development platform on top of a graphical framework provided by the X Window System.

Workspaces are separate desktop screens which have different application windows. These can be used to organize the working environment by grouping open application windows by task. for eg. windows being used to perform a particular system maintenance activity.

Commands are the names of the programs installed on the system
More than 1 command on a single line can be delimited by ;. A ; is a member of a class of characters called metacharacters that has special meanings for bash.

=> superuser can use passwd command to change other user's passwords
=> file command scans the beginning of a file's contents and displays what type it is. for eg. file /etc/passwd
=> head and tail commands display the beginning and ends of a file respectively. for eg. head -n 100 abc.txt, tail -n 100 abc.txt
=> wc command counts lines, words or characters with the options -l, -w and -c respectively. for eg. wc -l abc.txt, wc -w abc.txt, wc -c abc.txt
=> useradd command is used by the superuser, root to create additional users on the system
tab can be used for autocompleting options also after a - or --
=> history command displays a list of all previously executed commands prefixed with a command number
=> ! is a metacharacter used to expand previous commands without having to retype them, !number expands to the command matching the number specified, !string expands to the most recent command that begins with the string specified

ctrl+a jump to beginning of command line
ctrl+e jump to end of command line
ctrl+u clear from the cursor to the beginning of the command line
ctrl+k clear from the cursor to the end of the command line
ctrl+left arrow jump to the beginning of the previous word on the command line
ctrl+right arrow jump to the end of the next word on the command line
ctrl+r search the history list of commands for a pattern

Linux File System Heirarchy
-> single inverted tree of directories.
-> the directory / is the root directory at the top of the FSH, / character is also used as a directory separator in file names.
-> subdirectories of / are used for standardized purposes to organize files by type and purpose.

Following terms are encountered  in describing file system heirarchy:
-> static is content that remains unchanged until explicitly edited or reconfigured.
-> dynamic or variable is content typically modified or appended by active processes.
-> persistent is content, particularly configuration settings, that remain after a reboot.
-> runtime is process or system-specific content or attributes cleared during reboot.

/usr -> installed softwares, shared libraries, include files and static read-only program data.
	-> /usr/bin -> user commands
	-> /usr/sbin -> system administration commands
	-> /usr/local -> locally customized software

/etc -> configuration files specific to this system

/var -> variable data specific to this system that should persist between boots. Files that dynamically change eg. databases, cache directories, log files, printer spooled documents, and website content.

/run -> runtime data for processes started since the last boot. This includes process ID files and lock files. The contents of this directory are recreated upon reboot. This directory consolidates /var/run and /var/lock from older versions of Enterprise Linux.

/home -> home directories where regular users store their personal data and configuration files

/root -> home directory for the administrative superuser, root.

/tmp -> Writable space for temporary files. Files more than 10 days old are deleted from this directory automatically. Another temporary directory /var/tmp in which files that have not been accessed, changed or modified in more than 30 days are deleted automatically.

/boot -> Files needed in order to start the boot process

/dev -> contains special device files which are used by the system to access hardware

bin, sbin, lib, lib64 have been moved from / to /usr/ from older versions of linux by using symlinks(symbolic links)

file names in linux are case sensitive

=> pwd command -> present working directory
=> ls command -> lists all files in that location -> options include -l(long listing), -a(include hidden files), -R(recursive)
=> cd command -> change directories

~ -> users current home directory 

=> touch command -> updates a file's timestamp to the current date and time without otherwise modifying it, otherwise creates an empty file

. -> current directory
.. -> parent directory

these special directories exist in every directory of the system

hidden files are not a security feature. They keep necessary user configuration files from cluttering home directories. Many commands process hidden files only with specific command line options, preventing one user's configuration from being accidentally copied to other directories or users.

To protect a file's contents from improper viewing requires the use of file permissions.

=> cd - command changes directory to the directory where the user was previous to the current directory.
=> cd .. command uses the .. hidden directory to move up one level to the parent directory without needing to know the exact parent directory name.
=> cp -> copy file, cp -r -> copy directory, in any destination, new file names must be unique, if not then the copy command will overwrite the existing file
=> rm -> remove file, rm -r -> remove directory
=> mv -> move file, mv -> move directory
=> mkdir -> creates one or more directories or subdirectories, mkdir -p /par1/par2/dir -> -p option creates missing parent directories for the requested destination, if the parent directories exist in the destination path then -p option is not required.
=> mv dir1 dir2 -> if dir2 exists the result is a move, if not then the result is a rename.

There is no command line undelete feature, nor a trash bin from which to restore

=> rm -i will interactively prompt for each deletion, this is opposite from -f which will forcefully delete without prompting the user
=> rmdir command deletes empty directories

The bash shell has a path name matching capability called globbing.
Globbing is a shell command parsing operation that expands a wildcard pattern into a list of matching path names.

Regex pattern matching in linux
-> * -> matches anything
-> ? -> matches one character
-> [abc...] -> any one character in the enclosed class
-> [!abc...] -> any one character not in the enclosed class
-> [[:alpha:]] -> any alphabetic character 
-> [[:lower:]] -> any lowercase character
-> [[:upper:]] -> any uppercase character
-> [[:alnum:]] -> any alphabetic character or digit
-> [[:digit:]] -> any digit 0-9
-> [[:space:]] -> any one whitespace character

Brace Expansion
echo {Sunday,Monday,Tuesday,Wednesday}.log -> Sunday.log Monday.log Tuesday.log Wednesday.log
echo file{1..3}.txt -> file1.txt file2.txt file3.txt
echo file{a..c}.txt -> filea.txt fileb.txt filec.txt
echo file{a,b}{1,2}.txt -> filea1.txt filea2.txt fileb1.txt fileb2.txt
echo file{a{1,2},b,c}.txt -> filea1.txt filea2.txt fileb.txt filec.txt

Command Substitution
$(command) -> echo The Time is ${date}

Protecting arguements from expansion
\ is an escape character for metacharacters in bash protecting the single following character from special interpretation
use "" to suppress globbing and shell expansion -> echo "*** hostname is ${host} ***" -> *** hostname is desktopx ***
use '' to interpret all text literally -> echo "Will $host evaluate to $(hostname)?" -> Will desktopx evaluate to desktopx?
											   'Will $host evaluate to $(hostname)?' -> Will $host evaluate to $(hostname)?

Sections of the Linux manual
Section Content type
1       User commands(both executable and shell programs)
2       System calls (kernel routines invoked from user space)
3       Library functions (provided by program libraries)
4       Special files (such as device files)
5       File formats (for many configuration files and structures)
6       Games (historical section for amusing programs)
7       Conventions . standards , and miscellaneous (protocols, file systems)
8       System administration and privileged commands (maintenance tasks)
9       Linux kernel API (internal kernel calls)
		
=> man 1 su, man 1 passwd, man -f passwd, man -k zip, man -k boot, man -k ext4 commands
=> passwd -l username -> locks the user's account
=> passwd -u username -> unlocks the user's account

Man pages have a formal format useful as a command reference, but less useful as general documentation. For such documents, the GNU Project developed a different online documenation system known as GNU info. Info documents allow thorough discussion of complex commands and concepts.

=> pinfo tar, info tar, pinfo info, pinfo pinfo, man tar

In addition to man and pinfo, developers may also choose to include documentation in their application's RPM distribution package. When the package is installed, files recognized as documentation are moved to /usr/share/doc/packagename

=> firefox file:///usr/share/doc, less and gedit can also be used

The kernel itself has a significant documentation package. The kernel-doc package is a treasure of kernel, driver, tuning and advanced configuration information. Experienced system administrators regularly research kernel-doc files.

=> less /usr/share/doc/vim-common-*/README.txt
=> less yum-3*/README
=> ls -l bc-*/Examples
=> firefox grub2-tools-*/grub.html
=> yum list *-doc*

use yum to display only those packages that contain "-doc", "-docs", "-documentation" in the package name.

RedHat customer portal (https://access.redhat.com, https://access.redhat.com/help, https://access.redhat.com/site/support/policy/support_process) provides customers with access to everything provided with their subscription through one convenient location.
-> customers can search for solutions, FAQs and articles through KnowledgeBase.
-> access to official product documentation is provided.
-> support tickets can be submitted and managed.
-> subscriptions to RedHat products can be attached and detached from registered systems.
-> software downloads, updates and evaluations can be obtained.

=> redhat-support-tool -> raise a bug to redhat
=> sosreport command, tar -xvJf /var/tmp/sosreport-*.tar.xz command -> diagnostic information, kdump

Processes connect to files using standard connections 0,1,2 for stdin(standard input), stdout(standard output) and stderr(standard error) respectively. Processes use channels 3 and above to connect with other files.

Redirecting stdout suppresses process output from appearing on the terminal. Redirecting only stdout does not suppress stderr error messages from displaying on the terminal.

>file -> redirect stdout to a file
>>file -> redirect stdout to a file, append to current file content
2>file -> redirect stderr to a file
2>/dev/null -> discard stderr error messages by redirecting to a special file /dev/null
&>file -> combine stdout and stderr to 1 file
>>file 2>&1 or &>>file-> combine stdout and stderr, append to current file content

=> diff prevfile currfile >> /tmp/tracking-changes -> appends process output to an existing file
=> find /etc -name passwd 2> /tmp/errors -> redirect errors to a file while viewing normal command outputs
=> find /etc -name passwd > /tmp/output 2> /tmp/errors -> save process output and error messages to separate files
=> find /etc -name passwd > /tmp/output 2> /dev/null -> save process output and ignore and discard error messages

Redirection controls channel output to or from files while piping sends channel output to another process.

=> ls | ws -l > /tmp/countfiles -> count number of lines in an output or listing
=> ls -l | tee /tmp/saved-output -> the tee command displays or redirects the intermediate result normally suppressed due to piping.
=> tty -> ?

The key design principle of Linux is that information is stored in text based files. Text files include both flat files with rows of similar information such as configuration files in /etc and Extensible Markup Language(XML) files which define data structure through text tags seen in application configuration files throughout both /etc and /usr. The advantage of text files is that they can be shared and moved between systems without conversion. They can also be viewed and edited using any simple text editor.

Vim is an improved version of the vi text editor distributed with Linux and Unix Systems.
i key -> insert mode
esc key -> command mode
v key -> visual mode
  -> V -> multi line 
  -> ctrl+v -> block selection
  -> v, V, ctrl+v -> exit visual mode
: key -> begins extended command mode for tasks like writing the file to save it, and quitting the vim editor
:w -> write(save) the file and remain in command mode for more editing
:wq -> write the file and quit vim
:q! -> quit vim, but discard all file changes since the last write

In vim copy and paste is called yank and put using command characters y and p

refer http ://www.vim.org/












































































































